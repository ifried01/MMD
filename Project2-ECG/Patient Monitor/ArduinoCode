#include <SPI.h>
#include <WiFi.h>


// the IP address for the shield:
static IPAddress ip(10, 3, 13, 88);

char ssid[]  = "EECS";      // your network SSID (name) 
char pass[]  = "";          // your network password
int keyIndex = 0;           // your network key Index number (needed only for WEP)

int status = WL_IDLE_STATUS;

WiFiServer server(80);
// global temp vars
const int NUM_READINGS = 50;
const int PULSE_VALUE = 512;

float currTemp = 0;
boolean batteryLow = false;
int EKGlead[NUM_READINGS];
int Pulselead[NUM_READINGS];
float time[2] = {0,0};
float pulse = 0;
int counter = 0;

void setup() {
  
  pinMode(A0, INPUT);    //temperature
  pinMode(A1, INPUT);    //EKG
  pinMode(A2, INPUT);    //Pulse
  pinMode(A3, INPUT);    //Battery
  
  //initialize 2 arrays
  for (int i = 0; i < NUM_READINGS; i++) {
    EKGlead[i] = 0;
    Pulselead[i] = 0;
  }
  
  //Initialize serial and wait for port to open:
  Serial.begin(9600); 
  while (!Serial) {
    ; // wait for serial port to connect. Needed for Leonardo only
  }

  // check for the presence of the shield:
  if (WiFi.status() == WL_NO_SHIELD) {
    Serial.println("WiFi shield not present"); 
    // don't continue:
    while(true);
  } 

  Serial.print(("Firmware version: "));
  Serial.println(WiFi.firmwareVersion());

  WiFi.config(ip);

  // attempt to connect to Wifi network:
  while ( status != WL_CONNECTED) { 
    Serial.print("Attempting to connect to SSID: ");
    Serial.println(ssid);
    // Connect to WPA/WPA2 network. Change this line if using open or WEP network:    
    status = WiFi.begin(ssid);

    // wait 10 seconds for connection:
    delay(10000);
  } 
  server.begin();
  // you're connected now, so print out the status:
  printWifiStatus();
  //delay(10000);
  //Initialize analog reference value to 1.1v for higher
  //resolution and better temp range. 
  analogReference(INTERNAL1V1);
  getEKG();
  getPulse();
  getTemp();
  getBattery();
}

void loop() {
  getEKG();
  getPulse();
  getTemp();
  getBattery();
  handleClient();
  counter++;
  if(counter >= NUM_READINGS) {
    counter = 0;
  }
}


void getTemp() {
  // Grab analog reading from thermistor
  currTemp = convertToTemp( analogRead( A0 ) ); 
}

void getEKG() {
  //grab analog voltage from EKG leads
  EKGlead[counter] =  analogRead(A1);
}

void getPulse() {
  Pulselead[counter] = analogRead(A2);
  if (analogRead(A2) > PULSE_VALUE) {
    time[1] = time[0];
    time[0] = millis();
    pulse = time[0] - time[1];
  }
}

void getBattery() {
  if (analogRead(A3) > 716) {
    batteryLow = true;
  }
}

// Convert 0 to 1023 to a degrees Celcius
float convertToTemp( int reading ) {
  return (((float)reading*1.1) / 1024)*100; 
}

void handleClient() {
  // listen for incoming clients
  WiFiClient client = server.available();
  if (client) {
    Serial.println("new client");
    // an http request ends with a blank line
    boolean currentLineIsBlank = true;
    while (client.connected()) {
      if (client.available()) {
        char c = client.read();
        Serial.write(c);
        // if you've gotten to the end of the line (received a newline
        // character) and the line is blank, the http request has ended,
        // so you can send a reply
        if (c == '\n' && currentLineIsBlank) {
          // send a standard http response header
          client.println("HTTP/1.1 200 OK");
          client.println("Content-Type: application/json;charset=utf-8");
          client.println("Connection: close");  // the connection will be closed after completion of the response
          client.println();
          client.print("{");
          client.print("\"currentTemp\":\"");
          client.print(currTemp);
          client.print("\",");
          client.print("\"pulse\":\"");
          client.print(pulse);
          client.print("\",");
          client.print("\"battery\":\"");
          client.print(batteryLow);
          client.print("\"");
          client.print("}");
          client.println();
          break;

        }
        if (c == '\n') {
          // you're starting a new line
          currentLineIsBlank = true;
        } 
        else if (c != '\r') {
          // you've gotten a character on the current line
          currentLineIsBlank = false;
        }
      }
    }
    // give the web browser time to receive the data
    delay(1);

    // close the connection:
    client.stop();
    Serial.println("client disonnected");
  }
}

void printWifiStatus() {
  // print the SSID of the network you're attached to:
  Serial.print("SSID: ");
  Serial.println(WiFi.SSID());

  // print your WiFi shield's IP address:
  IPAddress ip = WiFi.localIP();
  Serial.print("IP Address: ");
  Serial.println(ip);

  // print the received signal strength:
  long rssi = WiFi.RSSI();
  Serial.print("signal strength (RSSI):");
  Serial.print(rssi);
  Serial.println(" dBm");
}











